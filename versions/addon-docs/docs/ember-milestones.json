{"jsonapi":{"version":"1.0"},"data":{"type":"project","id":"ember-milestones","attributes":{"name":"ember-milestones","version":"1.0.0-alpha.7","navigationIndex":{"modules":[{"path":"modules/ember-milestones","name":"ember-milestones"}]}},"relationships":{"modules":{"data":[{"type":"module","id":"ember-milestones"}]}}},"included":[{"type":"class","id":"ember-milestones~MilestoneCoordinator","attributes":{"file":"ember-milestones","lineNumber":115,"description":"<div class=\"docs-md\"><p>A <code>MilestoneCoordinator</code> is the result of an <code>activateMilestones</code> call,\nwhich provides the ability to interact with the milestones you&#39;ve activated\nand subsequently deactivate them.</p>\n<p>In most cases, you can simply use the importable <code>advanceTo</code> and\n<code>deactivateAllMilestones</code> functions from the <code>&#39;ember-milestones&#39;</code> module\nrather than interacting directly with a <code>MilestoneCoordinator</code> instance.</p></div>","access":"public","tags":[],"exportType":"named","name":"MilestoneCoordinator","isInterface":true,"fields":[],"methods":[{"file":"ember-milestones","lineNumber":120,"description":"<div class=\"docs-md\"><p>Advance until the given milestone is reached, continuing past any others\nthat are active for this coordinator in the meantime.</p></div>","access":"public","tags":[],"name":"advanceTo","isAsync":false,"isGenerator":false,"signatures":[{"params":[{"name":"name","type":"string","isOptional":false,"isRest":false}],"returns":{"type":"MilestoneTarget"}}],"isStatic":false},{"file":"ember-milestones","lineNumber":125,"description":"<div class=\"docs-md\"><p>Deactivate all milestones associated with this coordinator.</p></div>","access":"public","tags":[],"name":"deactivateAll","isAsync":false,"isGenerator":false,"signatures":[{"params":[],"returns":{"type":"void"}}],"isStatic":false}],"accessors":[]},"relationships":{"parentClass":{"data":null}}},{"type":"class","id":"ember-milestones~MilestoneHandle","attributes":{"file":"ember-milestones","lineNumber":182,"description":"<div class=\"docs-md\"><p>A <code>MilestoneHandle</code> represents a milestone that your application code is\ncurrently paused at. It provides methods for determining how that milestone\nwill ultimately resolve, whether you invoke the original behavior or stub\nout a different return value, error, or cancellation.</p></div>","access":"public","tags":[],"exportType":"named","name":"MilestoneHandle","isInterface":true,"fields":[],"methods":[{"file":"ember-milestones","lineNumber":206,"description":"<div class=\"docs-md\"><p>Settle this milestone by causing it to behave as a canceled task.</p>\n<p>Note that cancellation is only available if <code>ember-concurrency</code> is\npresent.</p></div>","access":"public","tags":[],"name":"cancel","isAsync":true,"isGenerator":false,"signatures":[{"params":[{"name":"options","type":"ResolutionOptions","isOptional":true,"isRest":false}],"returns":{"type":"Promise<void>"}}],"isStatic":false},{"file":"ember-milestones","lineNumber":188,"description":"<div class=\"docs-md\"><p>Settle this milestone by invoking its original callback. The promise\nreturned by this method will resolve once the result of the original\ncallback has settled.</p></div>","access":"public","tags":[],"name":"continue","isAsync":true,"isGenerator":false,"signatures":[{"params":[{"name":"options","type":"ResolutionOptions","isOptional":true,"isRest":false}],"returns":{"type":"Promise<void>"}}],"isStatic":false},{"file":"ember-milestones","lineNumber":193,"description":"<div class=\"docs-md\"><p>Settle this milestone by resolving its promise with the given value.</p></div>","access":"public","tags":[],"name":"return","isAsync":true,"isGenerator":false,"signatures":[{"params":[{"name":"value","type":"any","isOptional":true,"isRest":false},{"name":"options","type":"ResolutionOptions","isOptional":true,"isRest":false}],"returns":{"type":"Promise<void>"}}],"isStatic":false},{"file":"ember-milestones","lineNumber":198,"description":"<div class=\"docs-md\"><p>Settle this milestone by rejecting its promise with the given error.</p></div>","access":"public","tags":[],"name":"throw","isAsync":true,"isGenerator":false,"signatures":[{"params":[{"name":"error","type":"any","isOptional":false,"isRest":false},{"name":"options","type":"ResolutionOptions","isOptional":true,"isRest":false}],"returns":{"type":"Promise<void>"}}],"isStatic":false}],"accessors":[]},"relationships":{"parentClass":{"data":null}}},{"type":"class","id":"ember-milestones~MilestoneTarget","attributes":{"file":"ember-milestones","lineNumber":136,"description":"<div class=\"docs-md\"><p>A <code>MilestoneTarget</code> represents the &#39;goal&#39; of proceeding to a certain\nmilestone. It&#39;s a <code>PromiseLike</code> object that resolves to a <code>MilestoneHandle</code>\nwhen its associated milestone is reached.</p>\n<p>A <code>MilestoneTarget</code> also contains shortcut methods for easily invoking\na particular behavior when the milestone is reached.</p></div>","access":"public","tags":[],"exportType":"named","name":"MilestoneTarget","isInterface":true,"fields":[],"methods":[{"file":"ember-milestones","lineNumber":173,"description":"<div class=\"docs-md\"><p>Trigger a task cancellation when the milestone is reached. The following two\nlines are equivalent:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-keyword\">await</span> advanceTo(<span class=\"hljs-string\">'milestone'</span>).andCancel();\n<span class=\"hljs-keyword\">await</span> advanceTo(<span class=\"hljs-string\">'milestone'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">m</span> =&gt;</span> m.cancel());\n</code></pre><p>Note that cancellation is only possible when <code>ember-concurrency</code> is present.</p></div>","access":"public","tags":[],"name":"andCancel","isAsync":true,"isGenerator":false,"signatures":[{"params":[{"name":"options","type":"ResolutionOptions","isOptional":true,"isRest":false}],"returns":{"type":"Promise<void>"}}],"isStatic":false},{"file":"ember-milestones","lineNumber":162,"description":"<div class=\"docs-md\"><p>Invoke the milestone&#39;s original callback when reached. The following two\nlines are equivalent:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-keyword\">await</span> advanceTo(<span class=\"hljs-string\">'milestone'</span>).andContinue();\n<span class=\"hljs-keyword\">await</span> advanceTo(<span class=\"hljs-string\">'milestone'</span>).<span class=\"hljs-keyword\">then</span>(m =&gt; m.<span class=\"hljs-keyword\">continue</span>());\n</code></pre></div>","access":"public","tags":[],"name":"andContinue","isAsync":true,"isGenerator":false,"signatures":[{"params":[{"name":"options","type":"ResolutionOptions","isOptional":true,"isRest":false}],"returns":{"type":"Promise<void>"}}],"isStatic":false},{"file":"ember-milestones","lineNumber":144,"description":"<div class=\"docs-md\"><p>Return the given value when the milestone is reached. The following two\nlines are equivalent:</p>\n<pre class=\"docs-md__code\"><code>await advanceTo(<span class=\"hljs-string\">'milestone'</span>).andReturn(<span class=\"hljs-keyword\">value</span>);\nawait advanceTo(<span class=\"hljs-string\">'milestone'</span>).<span class=\"hljs-keyword\">then</span>(m =&gt; m.<span class=\"hljs-keyword\">return</span>(<span class=\"hljs-keyword\">value</span>));\n</code></pre></div>","access":"public","tags":[],"name":"andReturn","isAsync":true,"isGenerator":false,"signatures":[{"params":[{"name":"value","type":"any","isOptional":true,"isRest":false},{"name":"options","type":"ResolutionOptions","isOptional":true,"isRest":false}],"returns":{"type":"Promise<void>"}}],"isStatic":false},{"file":"ember-milestones","lineNumber":153,"description":"<div class=\"docs-md\"><p>Throw the given error when the milestone is reached. The following two\nlines are equivalent:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-keyword\">await</span> advanceTo(<span class=\"hljs-string\">'milestone'</span>).andThrow(error);\n<span class=\"hljs-keyword\">await</span> advanceTo(<span class=\"hljs-string\">'milestone'</span>).<span class=\"hljs-keyword\">then</span>(m =&gt; m.<span class=\"hljs-keyword\">throw</span>(error));\n</code></pre></div>","access":"public","tags":[],"name":"andThrow","isAsync":true,"isGenerator":false,"signatures":[{"params":[{"name":"error","type":"any","isOptional":false,"isRest":false},{"name":"options","type":"ResolutionOptions","isOptional":true,"isRest":false}],"returns":{"type":"Promise<void>"}}],"isStatic":false}],"accessors":[]},"relationships":{"parentClass":{"data":null}}},{"type":"class","id":"ember-milestones~ResolutionOptions","attributes":{"file":"ember-milestones","lineNumber":209,"description":null,"access":"public","tags":[],"exportType":"named","name":"ResolutionOptions","isInterface":true,"fields":[{"file":"ember-milestones","lineNumber":218,"description":"<div class=\"docs-md\"><p>Whether to resolve the promise returned by a <code>MilestoneHandle</code> method as\nsoon as possible or not.</p>\n<p>By default, resolution will be scheduled in a subsequent task so that any\nother pending tasks have a chance to execute. If you set <code>immediate: true</code>,\nhowever, the resolution will happen immediately, queueing a microtask.</p></div>","access":"public","tags":[],"name":"immediate","type":"undefined | true | false","isStatic":false,"isRequired":true}],"methods":[],"accessors":[]},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-milestones","attributes":{"file":"ember-milestones","lineNumber":1,"description":null,"access":"public","tags":[],"variables":[],"functions":[{"file":"ember-milestones","lineNumber":14,"description":"<div class=\"docs-md\"><p>Activate all milestones in the given array of names. Active milestones will pause\nwhen they are reached until instructed on how to proceed via a <code>MilestoneHandle</code>.</p>\n<p>Inactive milestones will pass through to their given callbacks as though the\nmilestone wrapper weren&#39;t present at all...</p></div>","access":"public","tags":[],"exportType":"named","name":"activateMilestones","isAsync":false,"isGenerator":false,"signatures":[{"params":[{"name":"milestones","type":"string[]","isOptional":false,"isRest":false}],"returns":{"type":"MilestoneCoordinator"}}]},{"file":"ember-milestones","lineNumber":41,"description":"<div class=\"docs-md\"><p>Advance until the given milestone is reached (continuing past any others hit in\nthe meantime). This function returns a <code>MilestoneTarget</code>, which is a thenable\nobject that will resolve to a <code>MilestoneHandle</code> once the milestone is reached,\nbut before its callback begins execution. This handle can be used to determine\nthe behavior of the milestone.</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-keyword\">let</span> milestone = <span class=\"hljs-keyword\">await</span> advanceTo(<span class=\"hljs-string\">'my-component#poller'</span>);\n<span class=\"hljs-comment\">// Make any assertions about the state of the world here</span>\n<span class=\"hljs-keyword\">await</span> milestone.<span class=\"hljs-keyword\">continue</span>();\n</code></pre><p><code>MilestoneTarget</code>s also include shortcut methods if you don&#39;t need to hold\nwhen the milestone is reached and just want to specify the milestone&#39;s behavior:</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-selector-tag\">await</span> <span class=\"hljs-selector-tag\">advanceTo</span>(<span class=\"hljs-string\">'my-component#poller'</span>)<span class=\"hljs-selector-class\">.andContinue</span>();\n</code></pre></div>","access":"public","tags":[],"exportType":"named","name":"advanceTo","isAsync":false,"isGenerator":false,"signatures":[{"params":[{"name":"name","type":"string","isOptional":false,"isRest":false}],"returns":{"type":"MilestoneTarget"}}]},{"file":"ember-milestones","lineNumber":21,"description":"<div class=\"docs-md\"><p>Deactivate all active milestones.</p></div>","access":"public","tags":[],"exportType":"named","name":"deactivateAllMilestones","isAsync":false,"isGenerator":false,"signatures":[{"params":[],"returns":{"type":"void"}}]},{"file":"ember-milestones","lineNumber":58,"description":"<div class=\"docs-md\"><p>Marks the given piece of asynchronous code as a milestone. When activated, this\nwill enable a coordinator (e.g. test code) to control the behavior of that code,\npausing it and potentially stubbing out its outcome.</p>\n<p>When not activated, code wrapped in a milestone is immediately invoked as though\nthe wrapper weren&#39;t there at all.</p></div>","access":"public","tags":[],"exportType":"named","name":"milestone","isAsync":false,"isGenerator":false,"signatures":[{"params":[{"name":"name","type":"string","isOptional":false,"isRest":false},{"name":"callback","type":"function","isOptional":false,"isRest":false}],"returns":{"type":"T"}},{"params":[{"name":"name","type":"string","isOptional":false,"isRest":false}],"returns":{"type":"PromiseLike<void>"}}]},{"file":"ember-milestones","lineNumber":90,"description":"<div class=\"docs-md\"><p>Set up the given list of milestones for the current test context. This is shorthand\nfor calling <code>activateMilestones</code> in a <code>beforeEach()</code> block and <code>deactivateAll()</code> in\nan <code>afterEach</code> block.</p>\n<p>You may specify an <code>as</code> option to expose the <code>MilestoneCoordinator</code> instance for\nthese milestones on the test context under the given key, e.g.</p>\n<pre class=\"docs-md__code\"><code><span class=\"hljs-built_in\">module</span>(<span class=\"hljs-string\">'My Module'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">hooks</span>) </span>{\n  setupMilestones(hooks, [<span class=\"hljs-string\">'one'</span>, <span class=\"hljs-string\">'two'</span>], { <span class=\"hljs-attr\">as</span>: <span class=\"hljs-string\">'milestones'</span> });\n  test(<span class=\"hljs-string\">'My Test'</span>, <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">assert</span>) </span>{\n    <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">this</span>.milestones.advanceTo(<span class=\"hljs-string\">'one'</span>);\n  });\n});\n</code></pre><p>In most cases, using the importable <code>advanceTo</code> should mean you won&#39;t need to\nuse the <code>as</code> parameter.</p></div>","access":"public","tags":[],"exportType":"named","name":"setupMilestones","isAsync":false,"isGenerator":false,"signatures":[{"params":[{"name":"hooks","type":"TestHooks","isOptional":false,"isRest":false},{"name":"names","type":"string[]","isOptional":false,"isRest":false},{"name":"options","type":"MilestoneTestOptions","isOptional":false,"isRest":false}],"returns":{"type":"void"}}]}]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-milestones~MilestoneCoordinator"},{"type":"class","id":"ember-milestones~MilestoneHandle"},{"type":"class","id":"ember-milestones~MilestoneTarget"},{"type":"class","id":"ember-milestones~ResolutionOptions"}]},"components":{"data":[]}}}]}
